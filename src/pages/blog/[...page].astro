---
import type { Blog, Site } from "@/types/configuration"
import config from "@/data/config.json"

import type { GetStaticPaths } from "astro"
import { getCollection } from "astro:content"

import { sortByDate, filterByStatus } from "@/utils/postFunctions"
import PostBody from "@/layouts/PostBody.astro"
import Group from "@/components/Group.astro"
import Container from "@/components/Container.astro"
import PostCard from "@/components/PostCard.astro"
import PaginationArchive from "@/components/PaginationArchive.astro"

import BaseLayout from "@/layouts/BaseLayout.astro"

const blogConfig: Blog = config.blog;
const { title: blogTitle, description: blogDescription, endpoint: blogEndpoint } = blogConfig

const siteConfig: Site = config.site;
const { description: siteDescription } = siteConfig

export const getStaticPaths = (async ({ paginate }) => {
  const blogConfig: Blog = config.blog
  const { pageSize: blogPageSize } = blogConfig

  const postCollection = await getCollection("post")
  const allPosts = sortByDate(postCollection)
  const posts = filterByStatus(allPosts)

  return paginate(posts, { pageSize: blogPageSize || 3 })
  
}) satisfies GetStaticPaths


const { page } = Astro.props


---

<BaseLayout
  title={blogTitle || "Blog"}
  description={blogDescription || siteDescription}>
    <PostBody>
      <Fragment slot="entryTitle">
        {blogTitle || "Blog"}</h1>
      </Fragment>
      <Fragment slot="entryGrid">
        {page.data.map((post) => <PostCard class="entry__card" post={post} />)}
      </Fragment>
    </PostBody>

  {page.lastPage > 1 && (
      <Group type="section">
        <Container>
          <PaginationArchive
            class="column-breakout"
            firstPage={page.url.prev ? `${blogEndpoint ? blogEndpoint : "/blog"}` : null}
            previousPage={page.url.prev ? page.url.prev : null}
            nextPage={page.url.next ? page.url.next : null}
            lastPage={
              page.url.next
                ? `${blogEndpoint ? blogEndpoint : "/blog"}/${Math.ceil(page.total / page.size)}`
                : null
            }
            currentPage={page.currentPage}
            totalPages={Math.ceil(page.total / page.size)}
          />
        </Container>
      </Group>
    )}
</BaseLayout>

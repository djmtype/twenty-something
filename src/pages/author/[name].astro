---
import { Icon } from "astro-icon/components"
import PostCard from "@/components/PostCard.astro"
import Group from "@/components/Group.astro"
import Grid from "@/components/Grid.astro"
import BaseLayout from "@/layouts/BaseLayout.astro"
import { Image } from "astro:assets"
import { makeSlug } from "@/utils/textConverter"
import Testimonial from "@/components/Testimonial.astro"
import { type CollectionEntry, getCollection } from "astro:content"
import Container from "@/components/Container.astro"

type Props = {
  data: CollectionEntry<"post" | "author">["data"]
  author: CollectionEntry<"author">
}

export async function getStaticPaths() {
  const authors = await getCollection(
    "author",
    ({ data }) => data.status === "publish"
  )

  const paths = authors.map((author) => ({
    params: {
      name: author.slug,
    },
    props: { author },
  }))
  return paths
}

const { author } = Astro.props
const { name, description, thumbnail, links } = author.data
const { Content } = await author.render()
const posts = await getCollection(
  "post",
  ({ data }) => data.status === "publish"
)

const postFilterByAuthor = posts.filter(
  (post) => post.data.author.id === makeSlug(name)
)
---

<BaseLayout
  title={`Author Profile: ${name}`}
  description={description ?? `A list of posts by ${name}`}
>
  {
    description && (
      <Testimonial
        class="testimonial--main"
        textColor="ink-1"
        authorName={name}
        hideCite
      >
        <p set:html={description} />
      </Testimonial>
    )
  }

  <Group type="section" class="group--main">
    <Container>
      <Grid type={["auto-fit", "3:1"]} class="grid--main column-breakout">
        <div class="posts">
          {
            postFilterByAuthor.length > 0 ? (
              <ul role="list" class="posts__list">
                {postFilterByAuthor.map((post) => (
                  <PostCard post={post} class="posts__card" />
                ))}
              </ul>
            ) : (
              <p>This author has no posts</p>
            )
          }
        </div>

        <div class="author flow">
          <div class="author__heading flow">
            {
              thumbnail ? (
                <figure class="author__figure">
                  <Image
                    class="author__thumbnail"
                    width={150}
                    height={150}
                    quality={60}
                    densities={[1, 2]}
                    src={thumbnail}
                    alt={`Headshot of ${name}`}
                  />
                </figure>
              ) : (
                <div class="author__figure">
                  <Icon name="lucide:user" width={36} height={36} />
                </div>
              )
            }

            <h1 class="author__title">
              {name}
            </h1>
          </div>

          <div class="author__summary flow">
            <Content />
            {
              links && (
                <ul role="list" class="social-links">
                  {links.map(({ name, url }) => {
                    if (!name || !url) return null
                    const lowerCaseName = name.toLowerCase()
                    let iconName = ""
                    switch (lowerCaseName) {
                      case "facebook":
                        iconName = "ri:facebook-fill"
                        break
                      case "twitter":
                        iconName = "ri:twitter-x-fill"
                        break
                      case "x":
                        iconName = "ri:twitter-x-fill"
                        break
                      case "instagram":
                        iconName = "ri:instagram-fill"
                        break
                      case "youtube":
                        iconName = "ri:youtube-fill"
                        break
                      case "linkedin":
                        iconName = "ri:linkedin-fill"
                        break
                      case "mastodon":
                        iconName = "ri:mastodon-fill"
                        break
                      case "bluesky":
                        iconName = "ri:bluesky-fill"
                        break
                        case "github":
                        iconName = "ri:github-fill"
                        break
                        case "pinterest":
                        iconName = "ri:pinterest-fill"
                        break
                        case "raindrop":
                        iconName = "ri:cloudy-2-fill"
                        break
                        case "tiktok":
                        iconName = "ri:tiktok-fill"
                        break
                        case "snapchat":
                        iconName = "ri:snapchat-fill"
                        break
                        case "reddit":
                        iconName = "ri:reddit-fill"
                        break
                        case "threads":
                        iconName = "ri:threads-fill"
                        break
                      // Add more cases as needed for other icons
                      default:
                        iconName = "ri:link"
                        break
                    }

                    return (
                      <li class="social-links__item">
                        <a class="social-links__link" href={url} target="_blank" rel="noopener noreferrer">
                          {iconName && <Icon name={iconName} />}{" "}
                          {/* Render the icon if there's a match */}
                          {name}
                        </a>
                      </li>
                    )
                  })}
                </ul>
              )
            }
          </div>
        </div>
      </Grid>
    </Container>
  </Group>
</BaseLayout>

<style>
  .social-links__item {
    font-size: var(--font-size-1);
  }
  .social-links__link {
    display: inline-flex;
    gap: 1ch;
    align-items: center;
  }

  .social-links svg {
    height: 1.25em;
    width: 1.25em;
  }
  .testimonial--main {
    --_items-margin-inline: auto;
  }

  .group--main {
    --_padding-top: var(--size-fluid-4);
  }

  .grid--main {
    row-gap: var(--size-fluid-5);
    align-items: start;
  }

  .posts__list {
    display: grid;
    gap: var(--size-fluid-5);
  }

  /* .posts__card {
    --_thumbnail-size: min(25%, 10ch);
    --_summary-size: 70%;
  } */

  .author {
    display: grid;
    position: sticky;
    top: var(--size-gutter);
  }

  .author__heading {
    --_flow: var(--size-3);
  }

  .author__title {
    font-size: var(--font-size-4);
    font-weight: var(--font-weight-4);
    font-family: var(--font-serif);
  }

  .author__figure {
    display: grid;
    place-content: center;
    border-radius: var(--radius);
    aspect-ratio: 1/1;
    height: auto;
    width: var(--size-10);
    background-color: var(--surface-overlay);
    color: var(--ink-muted);
    overflow: hidden;
  }

  .author__thumbnail {
    object-fit: cover;
    height: 100%;
    width: 100%;
  }
</style>

<style is:global>
  .author__summary p {
    color: var(--ink-2);
    font-size: var(--font-size-1);
  }
</style>

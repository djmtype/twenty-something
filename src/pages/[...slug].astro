---
import "@/styles/common/syntax.css"
import PaginationSingle from "@/components/PaginationSingle.astro"
import { sortByDate } from "@/utils/postFunctions"

import { getCollection, type CollectionEntry } from "astro:content"


import PostWrapper from "@/layouts/PostWrapper.astro"
import PageWrapper from "@/layouts/PageWrapper.astro"
export async function getStaticPaths() {
  const postCollection = await getCollection("post")
  const postEntries = sortByDate(postCollection)

  const pageEntries = await getCollection("page")

  const allEntries = [...postEntries, ...pageEntries]

  const entryCount = allEntries.length

  return allEntries.map((entry, index) => ({
    params: { slug: entry.slug },
    props: {
      entry,
      prevEntry: index + 1 !== entryCount ? postEntries[index + 1] : null,
      nextEntry: index !== 0 ? postEntries[index - 1] : null,
    },
  }))
}

type Props = {
  entry: CollectionEntry<"post" | "page">
  prevEntry: CollectionEntry<"post">
  nextEntry: CollectionEntry<"post">
}

const { entry, prevEntry, nextEntry } = Astro.props
const { Content } = await entry.render()
---

{
  entry.collection === "post" ? (
    <PostWrapper frontmatter={entry}>
      <Content />
      <div slot="pagination">
        {(prevEntry || nextEntry) && (
        <PaginationSingle prevEntry={prevEntry} nextEntry={nextEntry} />
        )}
      </div>
    </PostWrapper>
  ) : entry.collection === "page" ? (
    <PageWrapper frontmatter={entry}>
      <Content />
    </PageWrapper>
  ) : undefined
}


---
import type { FontSizeValue } from "@/types/props.types"
import { makeSlug } from "@/utils/textConverter"

type Props = {
  as: "h2" | "h3" | "h4" | "h5" | "p" | "span"
  fontSize?: FontSizeValue
  class?: string
  textAlign?: string
  textColor?: string
  hasId?: boolean
  hasAnchor?: boolean
  hasIcon?: boolean
}

const html = await Astro.slots.render("default")

const {
  as: Component = "p",
  hasId,
  class: className,
  textAlign,
  textColor,
  hasAnchor,
  hasIcon,
} = Astro.props as Props

const textProps = {
  ...(hasId && html ? { id: makeSlug(html) } : {}),
  class: [
    "text-headline",
    textAlign === "center" ? "text-center" : "",
    textColor ? `text-color-${textColor}` : "",
    hasAnchor ? "text-anchor" : "",
    hasIcon ? "text-icon" : "",
    className || "",
  ]
    .filter(Boolean)
    .join(" "),
}
---

{
  hasAnchor && hasId ? (
    <div tabindex="-1" class={`text-wrapper text-${Component}`}>
      <a class="anchor-link" href={"#" + makeSlug(html)}>
        <>
          <span class="anchor-icon" aria-hidden="true">#</span>
          <span class="sr-only">Anchor for {html}</span>
        </>
      </a>
      <Component {...textProps}><slot /></Component>
    </div>
  ) : (
    <Component {...textProps}><slot /></Component>
  )
}

<style>

.text-wrapper {
  display: flex;
  gap: .25em;
  
}

  .text-h2 {
    font-size: var(--font-size-6);
  }
  .text-h3 {
    font-size: var(--font-size-5);
  }
  .text-h4 {
    font-size: var(--font-size-4);
  }

  .text-h5 {
    font-size: var(--font-size-3);
  }

  .text-p {
    font-size: var(--font-size-2);
  }

  .anchor-link {
    align-self: center;
    font-size: .75em;
    margin-inline-start: calc(-1 * (.75em + .25em));
  }
  
</style>

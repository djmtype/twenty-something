---
import navigation from "@/data/navigation.json"
import { slugify } from "@/utils/textConverter"

type ChildItem = {
  name: string
  url: string
  target?: string
  rel?: string
}

type NavigationItem = {
  name: string
  url: string
  target?: string
  rel?: string
  childItems?: ChildItem[]
}

const { pathname } = Astro.url
// const currentPage = Astro.url.pathname
---

<nav class="nav-primary" id="primary-navigation">
  <ul role="list" class="nav-primary__list">
    {
      navigation.map((nav: NavigationItem) => (
        <li
          class={`nav-primary__item ${
            nav.childItems ? "nav-primary__item--parent" : ""
          }`}
        >
          {nav.childItems ? (
            <a
              role="button"
              data-toggle="subnav"
              aria-haspopup="true"
              aria-expanded="false"
              href="#0"
              class={`nav-primary__link nav-primary__link--parent ${
                nav.childItems?.some(
                  (child: ChildItem) =>
                    child.url === pathname || `${child.url}/` === pathname,
                )
                  ? "active"
                  : ""
              }`}
            >
              {nav.name}
            </a>
          ) : (
            <a
              href={nav.url}
              id={`nav-primary__link--${slugify(nav.name).toLowerCase()}`}
              class={`nav-primary__link ${
                pathname === `${nav.url}/` || pathname === nav.url
                  ? "active"
                  : ""
              }`}
              aria-current={
                pathname === `${nav.url}/` || pathname === nav.url
                  ? "page"
                  : undefined
              }
              target={nav.target}
              rel={nav.rel || (nav.target ? "noopener noreferrer" : undefined)}
            >
              {nav.name}
            </a>
          )}

          {nav.childItems && (
            <ul
              role="list"
              id="subnav"
              class="nav-sub__list"
              aria-hidden="true"
            >
              {nav.childItems.map((child: ChildItem) => (
                <li class="nav-primary__item nav-primary__item--child">
                  <a
                    id={`nav-primary__link--${slugify(
                      child.url,
                    ).toLowerCase()}`}
                    href={child.url}
                    class={`nav-primary__link nav-primary__link--child ${
                      pathname === `${child.url}/` || pathname === child.url
                        ? "active"
                        : ""
                    }`}
                    aria-current={
                      pathname === `${child.url}/` || pathname === child.url
                        ? "page"
                        : undefined
                    }
                    target={child.target}
                    rel={
                      child.rel ||
                      (child.target ? "noopener noreferrer" : undefined)
                    }
                  >
                    {child.name}
                  </a>
                </li>
              ))}
            </ul>
          )}
        </li>
      ))
    }
  </ul>
</nav>

<script>
  var submenuToggles = document.querySelectorAll<HTMLElement>(
    '[data-toggle="subnav"]',
  )

  submenuToggles.forEach(function (toggleElement) {
    toggleElement.addEventListener("click", function (event) {
      event.preventDefault()
      toggleSubmenu(toggleElement)
    })
  })

  function toggleSubmenu(toggleElement: HTMLElement) {
    var submenu = toggleElement.nextElementSibling

    // Add a null check before using submenu
    if (submenu) {
      var expanded = toggleElement.getAttribute("aria-expanded") === "true"

      // Close all other submenus
      submenuToggles.forEach(function (otherToggleElement) {
        if (otherToggleElement !== toggleElement) {
          closeSubmenu(otherToggleElement)
        }
      })

      // Toggle the clicked submenu
      toggleElement.setAttribute("aria-expanded", String(!expanded))
      submenu.setAttribute("aria-hidden", String(expanded ? "true" : "false"))
    }
  }

  function closeSubmenu(toggleElement: HTMLElement) {
    var submenu = toggleElement.nextElementSibling

    // Add a null check before using submenu
    if (submenu) {
      toggleElement.setAttribute("aria-expanded", "false")
      submenu.setAttribute("aria-hidden", "true")
    }
  }

  document.body.addEventListener("click", function (event) {
    if (
      event.target instanceof HTMLElement &&
      !document.getElementById("primary-navigation")?.contains(event.target)
    ) {
      closeAllSubmenus()
    }
  })

  document.addEventListener("keydown", function (event) {
    if (event.key === "Escape") {
      closeAllSubmenus()
    }
  })

  function closeAllSubmenus() {
    submenuToggles.forEach(function (toggleElement) {
      closeSubmenu(toggleElement)
    })
  }
</script>

<style lang="postcss" is:global>
 .nav-primary {
    display: none;
    flex: 1 1 100%;
    @media (--lg-n-above) {
      display: flex;
      flex: 0 1 auto;
      align-items: center;
      padding-inline: var(--gutter);
    }
  }

  .nav-primary.show {
    display: flex;
    flex-wrap: wrap;
    /* flex-direction: column; */
  }

 

  #subnav[aria-hidden="true"] {
    overflow: hidden;
    padding-block-end: 0;
    /* display: none; */
    max-height: 0;
    visibility: hidden;
    opacity: 0;
    @media (--lg-n-above) {
      max-height: unset;
    transform: translateY(10%);
    }
  }

  #subnav[aria-hidden="false"] {
    padding-block-end: var(--size-1);
    /* display: block; */
    max-height: 100%;
    visibility: visible;
    @media (--lg-n-above) {
      max-height: unset;
    opacity: 1;
    transform: translateY(0%);
    }
  }

 
  </style>

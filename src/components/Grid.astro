---
import type { SizeValue } from "@/types/props.types"

type Props = {
  class?: string
  columnSize?: SizeValue
  gap?: SizeValue
  columnGap?: SizeValue
  rowGap?: SizeValue
  type?: ("auto" | "3:1")[] | string
  style?: any
}
const {
  columnSize,
  gap,
  columnGap,
  rowGap,
  type,
  class: className,
  ...restProps
} = Astro.props

const styles = {
  ...(columnSize && { "--_column": `var(--${columnSize})` }),
  ...(gap && { "--_gap": `var(--${gap})` }),
  ...(columnGap && { "--_column-gap": `var(--${columnGap})` }),
  ...(rowGap && { "--_row-gap": `var(--${rowGap})` }),
}
---

<div
  class:list={[
    `grid`,
    type?.includes("auto") ? "grid--auto" : "",
    type?.includes("3:1") ? "grid--3-1" : "",
    className,
  ]}
  style={{
    ...styles,
    ...restProps.style,
  }}
  {...restProps}
>
  <slot />
</div>

<style is:global>
  .grid {
    --_grid-columns: repeat(12, minmax(0, 1fr));
    --_column: var(--size-content-2);
    --_column-gap: var(--size-gutter);
    --_row-gap: var(--size-gutter);
    display: grid;
    column-gap: var(--_gap, var(--_column-gap));
    row-gap: var(--_gap, var(--_row-gap));
    grid-template-columns: var(--_grid-columns);
  }

  .grid--auto {
    --_grid-columns: repeat(auto-fit, minmax(min(100%, var(--_column)), 1fr));
  }

  .grid--3-1 {
    @media (--lg-n-above) {
      --_grid-columns: minmax(min(100%, var(--size-content-3)), 2fr)
        minmax(min(100%, var(--size-content-1)), 1fr);
    }
  }
</style>

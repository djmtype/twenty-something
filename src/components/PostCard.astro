---
import { Image } from "astro:assets"
import { makeExcerpt, makePlainText, breakLongTitle, makeSmartText } from "@/utils/textConverter"
import FormattedDate from "@/components/FormattedDate.astro"
import { getEntry, type CollectionEntry } from "astro:content"

import Taxonomy from "@/components/Taxonomy.astro"



type Props = {
  post: CollectionEntry<"post">
  hideImage?: boolean
  class?: string
  style?: any
  index?: number
} 



const { 
  post, 
  index,
  hideImage, 
  class: className,
  ...restProps 
} = Astro.props



const {
  author,
  description,
  customExcerpt,
  title,
  date,
  thumbnail,
  thumbnailAlt = "",
  categories,
} = post.data


const { data: authorData } = await getEntry("author", author.slug)

const entryTitle = breakLongTitle(makeSmartText(title))

const postBody = post.body

const plainText = await makePlainText(postBody)

---

<article class:list={['card', className]} style={{...restProps.style
}} {...restProps}>
  {
    thumbnail && !hideImage && (
      <figure class="card__figure">
        <Image
          class="card__image"
          width={400}
          height={400}
          loading={index === 0 ? `eager` : `lazy`}
          densities={[1, 2]}
          quality={60}
          src={thumbnail}
          alt={thumbnailAlt}
        />
      </figure>
    )
  }


  <div class="card__content">
    <h2 class="card__title">
      <a class="link-block" href={`/${post.slug}`} set:html={entryTitle}></a>
    </h2>
    <div class="card__meta">
      <FormattedDate date={date} />
      &mdash; by <a href=`/author/${author.slug}`>{authorData.name}</a> in
      <Taxonomy type="category" name={categories[0]} />
    </div>

    <p class="card__description">
      {customExcerpt ? description : makeExcerpt(plainText, 30)}
    </p>

    
  </div>
</article>

<style>
  .card {
    --_thumbnail-size: var(--size-fluid-7);
    --_summary-size: 70%;
    --_image-height: auto;
    --_image-width: 100%;
    --_image-ratio: 1/1;
    --_gap: var(--size-fluid-3);
    --_align-items: start;
    display: flex;
    flex-wrap: wrap;
    gap: var(--_gap);
    align-items: var(--_align-items);
    position: relative;
    
  }

  .card :is(p, .card__meta) {
    position: relative;
  }

  .card > *:first-child {
    flex-basis: var(--_thumbnail-size);
    flex-grow: 1;
  }


  .card > *:last-child {
    flex-basis: 0;
    flex-grow: 999;
    min-inline-size: var(--_summary-size);
  }



  .card__image {
    aspect-ratio: var(--_image-ratio);
    height: var(--_image-height);
    width: var(--_image-width);
    object-fit: cover;
    border-radius: var(--radius);
  }

  .card__figure--placeholder {
    position: relative;
    color: var(--accent);
    aspect-ratio: 1/1;
    padding: clamp(var(--size-3), 3vw, var(--size-gutter));
    grid-template-areas: "stack";
    overflow: hidden;
    border-radius: var(--radius);
    background: var(--surface-overlay);

  }





  .card__title {
    font-size: var(--font-size-5);
    font-weight: var(--font-weight-4);
    font-family: var(--font-serif);
  }
  .card__content {
    display: flex;
    flex-direction: column;
    gap: var(--size-3);
  }

  .card__meta {
    font-size: var(--font-size-1);
    color: var(--text-2);
  }

  .card__description {
    font-size: var(--font-size-1);
    color: var(--text-2);
  }
</style>

---
import Grid from "@/components/Grid.astro"
import { parseMarkdown } from "@/utils/textConverter"
import type { ColophonData } from "@/data/colophon.types"
import colophon from "@/data/colophon.json"
import type { ConfigObj } from "@/data/config.types"
import config from "@/data/config.json"
import ThemeSelector from "@/components/ThemeSelector.astro"

const { title: siteTitle }: ConfigObj["site"] = config.site

const {
  description: footerDescription,
  copyrightMessage: copyrightMessage,
  copyrightYear: copyrightYear,
}: ConfigObj["footer"] = config.footer

const colophonData: ColophonData[] = colophon

const date = new Date()
---

<footer class="colophon section flow container">
  <div class="colophon__wrapper column-breakout">
    <div class="colophon__details flow">
      <p class="colophon__title">{siteTitle}</p>
      {
        footerDescription && (
          <p
            class="colophon__description"
            set:html={parseMarkdown(footerDescription)}
          />
        )
      }
    </div>
    <Grid type="auto" class="colophon__links">
      {
        colophonData.map((section) => (
          <dl class="colophon__list">
            <dt set:html={section.heading} />
            {section.content.map((item) => (
              <dd>
                <a
                  href={item.url}
                  target={item.target ? item.target : ""}
                  rel={item.rel ? item.rel : ""}
                >
                  {item.name}
                </a>
              </dd>
            ))}
          </dl>
        ))
      }
    </Grid>
  </div>

  <div class="colophon__extra">
    <ThemeSelector />

    {
      copyrightMessage && (
        <p class="colophon__copyright">
          <Fragment
            set:html={copyrightYear ? `&copy; ${date.getFullYear()}` : null}
          />
          <Fragment set:html={parseMarkdown(copyrightMessage)} />
        </p>
      )
    }
  </div>
</footer>

<style>
  .colophon {
    --_flow: var(--size-fluid-5);
    --_padding-bottom: var(--size-fluid-3);
  }

  .colophon__wrapper {
    display: flex;
    flex-wrap: wrap;
    row-gap: var(--gutter);
  }

  .colophon__details {
    --_flow: initial;
    flex-basis: max(var(--size-content-2), 50%);
    flex-grow: 1;
  }

  .colophon__title {
    font-weight: var(--font-weight-bold);
  }

  .colophon__links {
    --_column: 12ch;
    flex-basis: 0;
    flex-grow: 999;
    min-inline-size: 50%;
  }

  .colophon__list dt + dd {
    margin-top: 1em;
  }
  .colophon__list :is(dt, dd) {
    max-inline-size: unset;
  }

  .colophon__list dd {
    font-size: var(--font-size-1);
  }

  .colophon__list dd a {
    display: inline-block;
    padding-block: var(--size-2);
  }

  .colophon__extra {
    --_container-column: column-breakout;
    display: flex;
    flex-wrap: wrap;
    gap: var(--gutter);
    justify-content: space-between;
    align-items: center;
    text-align: center;
    padding-block-start: var(--size-5);
    border-block-start: var(--border-size-1) solid var(--separator);
  }

  .colophon__copyright {
    font-size: var(--font-size-1);
    color: var(--text-muted);
  }
  .colophon__description {
    font-size: var(--font-size-1);
  }
</style>

---
import { Icon } from "astro-icon/components"
import Group from "@/components/Group.astro"
import Container from "@/components/Container.astro"
import "@/styles/layouts/entry.css"
import { breakLongTitle, makeSmartText } from "@/utils/textConverter"
import { getEntry, type CollectionEntry } from "astro:content"
import Taxonomy from "@/components/Taxonomy.astro"
import BaseLayout from "@/layouts/BaseLayout.astro"
import FormattedDate from "@/components/FormattedDate.astro"
import { Image } from "astro:assets"

type AuthorData = {
  author: {
    slug: string
  }
}

type Props = {
  frontmatter: CollectionEntry<"post"> & { data: AuthorData }
}

const { frontmatter } = Astro.props
const {
  title,
  description,
  date,
  dateUpdated,
  thumbnail,
  thumbnailAlt,
  thumbnailSize,
  thumbnailCredit,
  author,
  tags,
  categories,
} = frontmatter.data

const entryTitle = breakLongTitle(makeSmartText(title))


const authorData =
  frontmatter.collection === "post" && author?.slug
    ? (await getEntry("author", author.slug)).data
    : undefined

    function getColumnOption(size: string | undefined) {
  return size === "full"
    ? "column-full"
    : size === "breakout"
      ? "column-breakout"
      : size === "content"
        ? "column-content"
        : "column-passage"
}

// const contentSizeOption = getColumnOption(contentSize)
const thumbnailSizeOption = getColumnOption(thumbnailSize)
---

<BaseLayout title={title} description={description}>
  <article class="entry section container">
    {
      thumbnail && (
        <figure class={`entry__figure ${thumbnailSizeOption}`}>
          <Image
            class="entry__thumbnail"
            quality="medium"
            src={thumbnail}
            widths={[600, 768, 992]}
  sizes={`(max-width: 480px) 600px, (max-width: 600px) 768px`}
            alt={thumbnailAlt ? thumbnailAlt : ""}
            loading="eager"
            format="webp"
            fetchpriority="high"
          />
        </figure>
      )
    }

    <div class="entry__heading column-passage flow">
      <h1
        set:html={entryTitle}
        class="entry__title"
        style={!thumbnail ? "font-size: var(--font-size-fluid-3)" : ""}
      />
      <div class="entry__meta">
        <span class="entry__date">
          <FormattedDate date={date} />
          {
            dateUpdated && (
              <span class="entry__date-updated">
                (Updated on <FormattedDate date={dateUpdated} />)
              </span>
            )
          } &mdash; by {
            authorData && (
              <a href={`/author/${author.slug}`}>{authorData.name}</a>
            )
          } in <Taxonomy type="category" name={categories[0]} />
        </span>
      </div>
    </div>

    <div class="entry__prose flow container column-full">
      <slot />
    </div>

    <footer class="entry__footer">
      <ul role="list" class="entry__tags">
        {
          tags &&
            tags.map((tag) => (
              <li class="tags__item">
                <Taxonomy type="tag" name={tag} className="tags__link" />
              </li>
            ))
        }
      </ul>
      {
        thumbnailCredit && (
          <p class="entry__thumbnail__credit">
            <Icon name="lucide:copyright" /> <span set:html={thumbnailCredit} />
          </p>
        )
      }
    </footer>
  </article>

  <Group type="div">
    <Container>
      <div class="column-breakout">
        <slot name="pagination" />
      </div>
    </Container>
  </Group>
</BaseLayout>


<style is:global>
  :where(.entry__prose > *) {
    --_container-column: column-passage;
  }

  .entry__meta a {
  text-decoration: underline;
  &:hover, &:focus-visible {
    text-decoration: none;
  }
}
  
</style>

---
import Group from "@/components/Group.astro"
import Container from "@/components/Container.astro"
import "@/styles/layouts/entry.css"
import { breakLongTitle } from "@/utils/textConverter"
import { getEntry, type CollectionEntry } from "astro:content"
import Taxonomy from "@/components/Taxonomy.astro"
import BaseLayout from "@/layouts/BaseLayout.astro"
import FormattedDate from "@/components/FormattedDate.astro"
import { Image } from "astro:assets"


type AuthorData = {
  author: {
    slug: string
  }
}

type Props = {
  frontmatter: CollectionEntry<"postCollection"> & { data: AuthorData }
}

const { frontmatter } = Astro.props
const {
  title,
  description,
  date,
  dateUpdated,
  thumbnail,
  thumbnailAlt,
  thumbnailSize,
  author,
  tags,
  categories,
} = frontmatter.data

const authorData =
  frontmatter.collection === "postCollection" && author?.slug
    ? (await getEntry("authorCollection", author.slug)).data
    : undefined
---

<BaseLayout title={title} description={description}>
  <article class="entry section container">
    {thumbnail && 
      <figure
        class={`entry__figure ${
          thumbnailSize === "breakout"
            ? "column-breakout"
            : thumbnailSize === "passage"
              ? "column-passage"
              : "column-content"
        }`}
      >
            <Image
              class="entry__thumbnail"
              quality={60}
              alt=""
              densities={[1, 2]}
              src={thumbnail}
              width={thumbnail.width}
              height={thumbnail.height}
              alt={thumbnailAlt ? thumbnailAlt : ""}
            />
      </figure>
    }

    <div class="entry__heading column-passage flow">
      <h1 set:html={breakLongTitle(title)} class="entry__title" style={!thumbnail ? 'font-size: var(--font-size-fluid-3)' : ''}></h1>
      <div class="entry__meta">
        <span class="entry__date">
          <FormattedDate date={date} />
          {
            dateUpdated && (
              <span class="entry__date-updated">
                (Updated on <FormattedDate date={dateUpdated} />)
              </span>
            )
          } â€” by {
            authorData && (
              <a href={`/author/${author.slug}`}>{authorData.name}</a>
            )
          } in <Taxonomy type="category" name={categories[0]} />
        </span>
      </div>
    </div>

    <div
      class="entry__prose flow container column-full"
    >
      <slot />
    </div>

    <footer class="entry__footer">
      <ul role="list" class="entry__tags">
        {
          tags &&
            tags.map((tag) => (
            <li class="tags__item">
                <Taxonomy type="tag" name={tag} className="tags__link" />
              </li>
            ))
        }
      </ul>
    </footer>
  </article>

  <Group type="div">
    <Container>
      <div class="column-breakout">
        <slot name="pagination" />
      </div>
    </Container>
  </Group>
</BaseLayout>

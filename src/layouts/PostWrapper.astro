---
import "@/styles/layouts/entry.css"
import { getEntry, type CollectionEntry } from "astro:content"
import { metafy } from "@/utils/textConverter"
import Taxonomy from "@/components/Taxonomy.astro"
import BaseLayout from "@/layouts/BaseLayout.astro"
import FormattedDate from "@/components/FormattedDate.astro"
import { Image } from "astro:assets"
import StyledLink from "@/components/StyledLink.astro"
import { Icon } from 'astro-icon/components';

type AuthorData = {
  author: {
    slug: string
  }
}

type Props = {
  frontmatter: CollectionEntry<"postCollection"> & { data: AuthorData }
}

const { frontmatter } = Astro.props
const {
  title,
  description,
  date,
  dateUpdated,
  thumbnail,
  thumbnailAlt,
  thumbnailSize,
  author,
  tags,
  categories,
} = frontmatter.data

const authorData =
  frontmatter.collection === "postCollection" && author?.slug
    ? (await getEntry("authorCollection", author.slug)).data
    : undefined
---

<BaseLayout title={title} description={description}>
  <article class="entry section container">
    <figure
      class={`entry__figure ${
        thumbnailSize === "breakout"
          ? "column-breakout"
          : thumbnailSize === "passage"
            ? "column-passage"
            : "column-content"
      }`}
    >
      {
        thumbnail && (
          <Image
            class="entry__thumbnail"
            quality={50}
            alt=""
            densities={[1, 2]}
            src={thumbnail}
            alt={thumbnailAlt ? thumbnailAlt : ""}
          />
        )
      }
    </figure>

    <div class="entry__heading flow">
      <h1 class="entry__title">{title}</h1>
      <div class="entry__meta">
        <span class="entry__date">
          <FormattedDate date={date} />
          {
            dateUpdated && (
              <span class="entry__date-updated">
                Last updated on <FormattedDate date={dateUpdated} />
              </span>
            )
          } â€” by {
            authorData && (
              <a href={`/author/${author.slug}`}>{authorData.name}</a>
            )
          } in <a href=`/category/${categories[0]}`>{metafy(categories[0])}</a>
        </span>
      </div>
    </div>

    <div
      class="entry__prose flow container"
    >
      <slot />
      
    </div>

    <footer class="entry__footer" x-data="{ hasHistory: window.history.length > 1 }">
      <ul role="list" class="entry__tags">
        {
          tags &&
            tags.map((tag) => (
            <li class="tags__item">
                <Taxonomy type="tag" name={tag} className="tags__link" />
              </li>
            ))
        }
      </ul>


      <div class="entry__back">

        <StyledLink x-show="hasHistory">
          <Icon name="bx:left-arrow-alt" style="color: var(--link)" /> <a role="button" href="#0" @click.prevent="window.history.back()">Go Back</a>
        </StyledLink>
      
     
      <StyledLink x-show="!hasHistory">
        <Icon name="bx:left-arrow-alt" style="color: var(--link)" /> <a href="/blog"> Go Back</a>
      </StyledLink>
         
      

    </div>
      
    </footer>
  </article>
</BaseLayout>


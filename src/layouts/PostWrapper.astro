---
import { getEntry, type CollectionEntry } from "astro:content"

import BaseLayout from "@/layouts/BaseLayout.astro"
import FormattedDate from "@/components/FormattedDate.astro"
import { Image } from "astro:assets"

type AuthorData = {
  author: {
    slug: string
  }
}

type Props = {
  frontmatter: CollectionEntry<"postCollection"> & { data: AuthorData }
}

const { frontmatter } = Astro.props
const {
  title,
  description,
  date,
  dateUpdated,
  thumbnail,
  thumbnailAlt,
  author,
  tags
} = frontmatter.data

const authorData =
  frontmatter.collection === "postCollection" && author?.slug
    ? (await getEntry("authorCollection", author.slug)).data
    : undefined


---

<BaseLayout title={title} description={description}>
  <article
    class="entry section content-grid"
    style="--grid-column: passage;"
  >

  <figure class="entry__figure">
    {
      thumbnail && (
        <Image
          class="entry__thumbnail"
          width={1020}
          height={510}
          src={thumbnail}
          alt={thumbnailAlt ? thumbnailAlt : ""}
        />
      )
    }
  </figure>
  
  <div class="entry__heading flow">
    

    
      <h1 class="entry__title">{title}</h1>
      <div class="entry__meta">
        <span class="entry__date">
          <FormattedDate date={date} />
          {
            dateUpdated && (
              <span class="entry__date-updated">
                Last updated on <FormattedDate date={dateUpdated} />
              </span>
            )
          } â€” by {
            authorData && (
              <a href={`/author/${author.slug}`}>{authorData.name}</a>
            )
          } in {tags[0]}
        </span>
      </div>
    </div>

    <div
      class="entry__prose content-grid flow"
      style="--grid-column: full-width; --_flow: 1.5em"
    >
      <slot />
    </div>
  </article>
</BaseLayout>

<style is:global>
  :where(.entry__prose > *) {
    --grid-column: passage;
  }

  .entry__heading {
    --_flow: var(--size-4);
    margin-block-start: var(--size-fluid-4);
    display: grid;
    
  }

  .entry__title {
    font-weight: var(--font-weight-4);
    font-family: var(--font-serif);
    font-size: var(--font-size-6);
  }

  .entry__thumbnail {
    border-radius: var(--radius-3);
  }

  .entry__meta {
    color: var(--text-muted);
  }

  .entry__heading + .entry__prose {
    margin-block-start: var(--size-fluid-5);
  }

  .entry__prose h2:not([class]) {
    font-size: var(--font-size-5);
  }

  .entry__prose h3:not([class]) {
    font-size: var(--font-size-4);
  }

  .entry__prose figure {
    --_flow: var(--size-fluid-4);
    & + *:not(h2) {
      --_flow: var(--size-fluid-4);
    }
  }

  .frame {
    background-color: var(--surface-0);
    padding: var(--gutter);
  }

  .img-full-width img {
    width: 100%;
    max-inline-size: unset;
  }
</style>
